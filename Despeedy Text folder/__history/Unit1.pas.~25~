unit Unit1;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.Menus,
  Vcl.ActnPopup, Vcl.StdStyleActnCtrls, System.Win.TaskbarCore, Vcl.Taskbar,
  Vcl.JumpList, Vcl.ToolWin, Vcl.ComCtrls, Vcl.StdCtrls;



type
  TForm1 = class(TForm)
    PopupActionBar1: TPopupActionBar;
    Save1: TMenuItem;
    New1: TMenuItem;
    Open1: TMenuItem;
    Close1: TMenuItem;
    Cut1: TMenuItem;
    N1: TMenuItem;
    N2: TMenuItem;
    Taskbar1: TTaskbar;
    MainMenu1: TMainMenu;
    File1: TMenuItem;
    Edit1: TMenuItem;
    Search1: TMenuItem;
    Help1: TMenuItem;
    new2: TMenuItem;
    open2: TMenuItem;
    save2: TMenuItem;
    saveas2: TMenuItem;
    close2: TMenuItem;
    N3: TMenuItem;
    cut2: TMenuItem;
    copy1: TMenuItem;
    paste1: TMenuItem;
    find1: TMenuItem;
    findinfiles1: TMenuItem;
    replace1: TMenuItem;
    delphihelp1: TMenuItem;
    about1: TMenuItem;
    JumpList1: TJumpList;
    OpenDialog1: TOpenDialog;
    SaveDialog1: TSaveDialog;
    Copy2: TMenuItem;
    Paste2: TMenuItem;
    SaveAs1: TMenuItem;
    StatusBar1: TStatusBar;
    Format1: TMenuItem;
    Format2: TMenuItem;
    FontDialog1: TFontDialog;
    PageSetup1: TMenuItem;
    N4: TMenuItem;
    Print1: TMenuItem;
    PageSetupDialog1: TPageSetupDialog;
    ReplaceDialog1: TReplaceDialog;
    FindDialog1: TFindDialog;
    PrintDialog1: TPrintDialog;
    SelectAll1: TMenuItem;
    Delete1: TMenuItem;
    richedit1: TRichEdit;
    procedure Close1Click(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure open2Click(Sender: TObject);
    procedure saveas2Click(Sender: TObject);
    procedure Save1Click(Sender: TObject);
    procedure new2Click(Sender: TObject);
    procedure Format2Click(Sender: TObject);
    procedure PageSetup1Click(Sender: TObject);
    procedure Print1Click(Sender: TObject);
    procedure find1Click(Sender: TObject);
    procedure replace1Click(Sender: TObject);
    procedure copy1Click(Sender: TObject);
    procedure cut2Click(Sender: TObject);
    procedure paste1Click(Sender: TObject);
    procedure SelectAll1Click(Sender: TObject);
    procedure Delete1Click(Sender: TObject);
    procedure Capture1Click(Sender: TObject);
    procedure FindDialog1Find(Sender: TObject);
    procedure ReplaceDialog1Replace(Sender: TObject);
    procedure ReplaceDialog1Find(Sender: TObject);



  private
    { Private declarations }
  public
    { Public declarations }
    procedure save_as;
    procedure save;

  end;

var
  Form1: TForm1;

implementation



{$R *.dfm}

procedure TForm1.copy1Click(Sender: TObject);
begin

richedit1.CopyToClipboard;
end;

procedure TForm1.cut2Click(Sender: TObject);
begin

richedit1.CutToClipboard;
end;

procedure TForm1.Delete1Click(Sender: TObject);
begin
richedit1.ClearSelection
end;

procedure TForm1.find1Click(Sender: TObject);
begin
 FindDialog1.Execute()

end;

procedure TForm1.FindDialog1Find(Sender: TObject);
var
  FoundAt: LongInt;
  StartPos, ToEnd: Integer;
  mySearchTypes : TSearchTypes;
  myFindOptions : TFindOptions;
begin
  mySearchTypes := [];
  with RichEdit1 do
  begin
    if frMatchCase in FindDialog1.Options then
       mySearchTypes := mySearchTypes + [stMatchCase];
    if frWholeWord in FindDialog1.Options then
       mySearchTypes := mySearchTypes + [stWholeWord];
    { Begin the search after the current selection, if there is one. }
    { Otherwise, begin at the start of the text. }
    if SelLength <> 0 then
      StartPos := SelStart + SelLength
    else
      StartPos := 0;
    { ToEnd is the length from StartPos through the end of the
      text in the rich edit control. }
    ToEnd := Length(Text) - StartPos;
    FoundAt := FindText
      (FindDialog1.FindText, StartPos, ToEnd, mySearchTypes);
    if FoundAt <> -1 then
    begin
      SetFocus;
      SelStart := FoundAt;
      SelLength := Length(FindDialog1.FindText);
    end
    else Beep;
  end;
end;


procedure TForm1.Format2Click(Sender: TObject);
begin
 if FontDialog1.Execute then
    RichEdit1.Font:=FontDialog1.Font;
end;

procedure TForm1.FormCreate(Sender: TObject);
begin
     {
  Initialize the dialog filters to open/save *.txt files
  and also files with arbitrary extension.
  }
 OpenDialog1.Filter := 'Text files (*.txt)|*.TXT|Any file (*.*)|*.*';
 SaveDialog1.Filter := 'Text files (*.txt)|*.TXT|Any file (*.*)|*.*';
 savedialog1.Options:=[ofOverwritePrompt];
 form1.Caption:= 'Untitled - ' +form1.Caption;
 richedit1.Clear;
end;



procedure TForm1.new2Click(Sender: TObject);
begin
//creating new file
 richedit1.Clear;
 form1.Caption:= 'Untitled - Notepad' ;
end;

procedure TForm1.open2Click(Sender: TObject);
begin
        { Execute an open file dialog. }
  if OpenDialog1.Execute then
    { First check if the file exists. }
    if FileExists(OpenDialog1.FileName) then
      { If it exists, load the data into the memo box. }
      richedit1.Lines.LoadFromFile(OpenDialog1.FileName) ;
      {extract the file name}
    if fileexists(opendialog1.FileName) then
     form1.Caption:= extractfilename(opendialog1.filename)
         + ' - Notepad';
       {save the existing file}
     if fileexists(opendialog1.FileName) then
     richedit1.Lines.SaveToFile(openDialog1.FileName)


    else
      { Otherwise, raise an exception. }
      raise Exception.Create('File does not exist.');
end;

procedure TForm1.PageSetup1Click(Sender: TObject);
begin
if PageSetupDialog1.Execute() then

end;

procedure TForm1.paste1Click(Sender: TObject);
begin
richedit1.PasteFromClipboard;

end;

procedure TForm1.SelectAll1Click(Sender: TObject);
begin
richedit1.SelectAll;
end;

procedure TForm1.Print1Click(Sender: TObject);
begin
if PrintDialog1.Execute() then
      Print
end;

procedure TForm1.replace1Click(Sender: TObject);
begin
 ReplaceDialog1.Execute;
end;

procedure TForm1.ReplaceDialog1Find(Sender: TObject);
begin
//ndDialog1Find(sender);
end;

procedure TForm1.ReplaceDialog1Replace(Sender: TObject);
   var
   selpos:integer;
begin
  with TReplaceDialog(sender) do
    selpos:=pos(FindText,richedit1.Lines.Text);
    if selpos >0 then
    begin
      richedit1.SelStart:=selpos - 1;
      richedit1.SelLength:=Length(FindText);
      richedit1.SelText:=ReplaceText;
    end
     else
 MessageDlg(Concat('find not''',FindText,'''in edit'),mtError,[mbOK],0);

end;



procedure TForm1.Save1Click(Sender: TObject);
begin
{  saving an exiting file  }
   save;
end;

procedure TForm1.saveas2Click(Sender: TObject);
begin
form1.save_as;
end;

procedure TForm1.Capture1Click(Sender: TObject);
begin
richedit1.Lines.SaveToFile('screencapture.bitmap');
end;

procedure TForm1.Close1Click(Sender: TObject);
begin
form1.Close;
end;


 //public procedure definition
procedure Tform1.save_as;
begin


    { Execute a save file dialog. }
  if SaveDialog1.Execute then
    { First check if the file exists. }
    if FileExists(SaveDialog1.FileName) then
      { If it exists, raise an exception. }
       savedialog1.Options:=[ofOverwritePrompt]
    else
      { Otherwise, save the memo box lines into the file. }
      richedit1.Lines.SaveToFile(saveDialog1.FileName);
      form1.Caption:= extractfilename(savedialog1.filename)
         + ' - Notepad';

 form1.save;
end;



procedure Tform1.save;
begin
{saving an existing file}
 richedit1.Lines.SaveTofile(SaveDialog1.FileName);
 savedialog1.Options:=[ofcreatePrompt];
end;


end.
